# CrystaShell - Configuração otimizada do Yazi baseada nos padrões recomendados
# Seguindo o guia: https://www.josean.com/posts/how-to-use-yazi-file-manager

"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [ 1, 4, 3 ]  # Layout com preview maior
sort_by        = "natural"     # Ordenação natural (melhor para números)
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false
linemode       = "size"       # Mostra tamanho dos arquivos
show_hidden    = true         # CrystaShell mostra arquivos ocultos
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "CrystaShell Yazi: {cwd}"

[preview]
wrap            = "no"
tab_size        = 4
max_width       = 600
max_height      = 900
cache_dir       = "~/.cache/yazi"
image_delay     = 30          # Delay para carregamento de imagens
image_filter    = "lanczos3"  # Melhor qualidade para redimensionamento
image_quality   = 90          # Alta qualidade para imagens
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
    { run = 'code "$@"', orphan = true, desc = "VS Code", for = "linux" },
    { run = '${EDITOR:-nvim} "$@"', desc = "Editor", block = true, for = "linux" },
]

open = [
    { run = 'xdg-open "$1"', desc = "Open", for = "linux" },
]

reveal = [
    { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
    { run = '''clear; exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]

# Visualizadores de imagem otimizados
image = [
    { run = 'feh "$@"', orphan = true, desc = "Feh", for = "linux" },
    { run = 'eog "$@"', orphan = true, desc = "Eye of Gnome", for = "linux" },
    { run = 'xdg-open "$@"', desc = "Default viewer", for = "linux" },
]

# Players de vídeo
video = [
    { run = 'mpv --force-window "$@"', orphan = true, desc = "MPV", for = "linux" },
    { run = 'vlc "$@"', orphan = true, desc = "VLC", for = "linux" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

# Players de áudio
audio = [
    { run = 'mpv "$@"', orphan = true, desc = "MPV", for = "linux" },
    { run = 'audacious "$@"', orphan = true, desc = "Audacious", for = "linux" },
]

# Visualizadores de PDF
pdf = [
    { run = 'zathura "$@"', orphan = true, desc = "Zathura", for = "linux" },
    { run = 'evince "$@"', orphan = true, desc = "Evince", for = "linux" },
    { run = 'okular "$@"', orphan = true, desc = "Okular", for = "linux" },
]

extract = [
    { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
]

[open]
rules = [
    # Pastas
    { name = "*/", use = [ "edit", "open", "reveal" ] },
    
    # Texto e código
    { mime = "text/*", use = [ "edit", "reveal" ] },
    { mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
    { mime = "*/javascript", use = [ "edit", "reveal" ] },
    
    # Imagens - usar visualizadores específicos
    { mime = "image/*", use = [ "image", "open", "reveal" ] },
    
    # Vídeos
    { mime = "video/*", use = [ "video", "reveal" ] },
    
    # Áudio
    { mime = "audio/*", use = [ "audio", "reveal" ] },
    
    # PDFs
    { mime = "application/pdf", use = [ "pdf", "reveal" ] },
    
    # Arquivos compactados
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] },
    
    # Arquivo vazio
    { mime = "inode/empty", use = [ "edit", "reveal" ] },
    
    # Fallback
    { name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 10
bizarre_retry    = 3
image_alloc      = 536870912  # 512MB para cache de imagens
image_bound      = [ 5000, 5000 ]
suppress_preload = false

[plugin]
fetchers = [
    { id = "mime", name = "*", run = "mime", prio = "high" },
]

spotters = [
    { name = "*/", run = "folder" },
    # Código
    { mime = "text/*", run = "code" },
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
    # Imagens - incluindo formatos modernos
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Vídeo
    { mime = "video/*", run = "video" },
    # Fallback
    { name = "*", run = "file" },
]

preloaders = [
    # Imagens - preload para melhor performance
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Vídeo
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Fontes
    { mime = "font/*", run = "font" },
    { mime = "application/ms-opentype", run = "font" },
]

previewers = [
    { name = "*/", run = "folder" },
    # Código
    { mime = "text/*", run = "code" },
    { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
    # JSON
    { mime = "application/{json,ndjson}", run = "json" },
    # Imagens - configuração otimizada
    { mime = "image/{avif,hei?,jxl}", run = "magick" },
    { mime = "image/svg+xml", run = "svg" },
    { mime = "image/*", run = "image" },
    # Vídeo
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Arquivos compactados
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
    { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
    { name = "*.{AppImage,appimage}", run = "archive" },
    # Discos virtuais
    { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
    { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
    { name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
    # Fontes
    { mime = "font/*", run = "font" },
    { mime = "application/ms-opentype", run = "font" },
    # Arquivo vazio
    { mime = "inode/empty", run = "empty" },
    # Fallback
    { name = "*", run = "file" },
]

[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title     = "Trash {n} selected file{s}?"
trash_origin    = "center"
trash_offset    = [ 0, 0, 70, 20 ]

# delete
delete_title    = "Permanently delete {n} selected file{s}?"
delete_origin   = "center"
delete_offset   = [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false
sort_translit  = false
